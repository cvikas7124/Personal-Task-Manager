import {
  canUseDOM_default,
  contains,
  css_default,
  init_canUseDOM,
  init_contains,
  init_css,
  init_ownerDocument,
  ownerDocument
} from "./chunk-Z3Y74P5Q.js";
import {
  _extends,
  init_extends
} from "./chunk-XDJW63H2.js";
import {
  __esm,
  __export
} from "./chunk-LK32TJAX.js";

// node_modules/react-big-calendar/node_modules/clsx/dist/clsx.m.js
var clsx_m_exports = {};
__export(clsx_m_exports, {
  clsx: () => clsx,
  default: () => clsx_m_default
});
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;
  else if ("object" == typeof e) if (Array.isArray(e)) for (t = 0; t < e.length; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
  else for (t in e) e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length; ) (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_m_default;
var init_clsx_m = __esm({
  "node_modules/react-big-calendar/node_modules/clsx/dist/clsx.m.js"() {
    clsx_m_default = clsx;
  }
});

// node_modules/dom-helpers/esm/animationFrame.js
function fallback(fn) {
  var curr = (/* @__PURE__ */ new Date()).getTime();
  var ms = Math.max(0, 16 - (curr - prev));
  var handle = setTimeout(fn, ms);
  prev = curr;
  return handle;
}
var prev, vendors, cancelMethod, rafImpl, getKey, cancel, request;
var init_animationFrame = __esm({
  "node_modules/dom-helpers/esm/animationFrame.js"() {
    init_canUseDOM();
    prev = (/* @__PURE__ */ new Date()).getTime();
    vendors = ["", "webkit", "moz", "o", "ms"];
    cancelMethod = "clearTimeout";
    rafImpl = fallback;
    getKey = function getKey2(vendor, k) {
      return vendor + (!vendor ? k : k[0].toUpperCase() + k.substr(1)) + "AnimationFrame";
    };
    if (canUseDOM_default) {
      vendors.some(function(vendor) {
        var rafMethod = getKey(vendor, "request");
        if (rafMethod in window) {
          cancelMethod = getKey(vendor, "cancel");
          rafImpl = function rafImpl2(cb) {
            return window[rafMethod](cb);
          };
        }
        return !!rafImpl;
      });
    }
    cancel = function cancel2(id) {
      if (typeof window[cancelMethod] === "function") window[cancelMethod](id);
    };
    request = rafImpl;
  }
});

// node_modules/dom-helpers/esm/matches.js
function matches(node, selector) {
  if (!matchesImpl) {
    var body = document.body;
    var nativeMatch = body.matches || body.matchesSelector || body.webkitMatchesSelector || body.mozMatchesSelector || body.msMatchesSelector;
    matchesImpl = function matchesImpl2(n, s) {
      return nativeMatch.call(n, s);
    };
  }
  return matchesImpl(node, selector);
}
var matchesImpl;
var init_matches = __esm({
  "node_modules/dom-helpers/esm/matches.js"() {
  }
});

// node_modules/dom-helpers/esm/closest.js
var closest_exports = {};
__export(closest_exports, {
  default: () => closest
});
function closest(node, selector, stopAt) {
  if (node.closest && !stopAt) node.closest(selector);
  var nextNode = node;
  do {
    if (matches(nextNode, selector)) return nextNode;
    nextNode = nextNode.parentElement;
  } while (nextNode && nextNode !== stopAt && nextNode.nodeType === document.ELEMENT_NODE);
  return null;
}
var init_closest = __esm({
  "node_modules/dom-helpers/esm/closest.js"() {
    init_matches();
  }
});

// node_modules/dom-helpers/esm/isDocument.js
function isDocument(element) {
  return "nodeType" in element && element.nodeType === document.DOCUMENT_NODE;
}
var init_isDocument = __esm({
  "node_modules/dom-helpers/esm/isDocument.js"() {
  }
});

// node_modules/dom-helpers/esm/isWindow.js
function isWindow(node) {
  if ("window" in node && node.window === node) return node;
  if (isDocument(node)) return node.defaultView || false;
  return false;
}
var init_isWindow = __esm({
  "node_modules/dom-helpers/esm/isWindow.js"() {
    init_isDocument();
  }
});

// node_modules/dom-helpers/esm/getScrollAccessor.js
function getscrollAccessor(offset2) {
  var prop = offset2 === "pageXOffset" ? "scrollLeft" : "scrollTop";
  function scrollAccessor(node, val) {
    var win = isWindow(node);
    if (val === void 0) {
      return win ? win[offset2] : node[prop];
    }
    if (win) {
      win.scrollTo(win[offset2], val);
    } else {
      node[prop] = val;
    }
  }
  return scrollAccessor;
}
var init_getScrollAccessor = __esm({
  "node_modules/dom-helpers/esm/getScrollAccessor.js"() {
    init_isWindow();
  }
});

// node_modules/dom-helpers/esm/scrollLeft.js
var scrollLeft_default;
var init_scrollLeft = __esm({
  "node_modules/dom-helpers/esm/scrollLeft.js"() {
    init_getScrollAccessor();
    scrollLeft_default = getscrollAccessor("pageXOffset");
  }
});

// node_modules/dom-helpers/esm/scrollTop.js
var scrollTop_default;
var init_scrollTop = __esm({
  "node_modules/dom-helpers/esm/scrollTop.js"() {
    init_getScrollAccessor();
    scrollTop_default = getscrollAccessor("pageYOffset");
  }
});

// node_modules/dom-helpers/esm/offset.js
function offset(node) {
  var doc = ownerDocument(node);
  var box = {
    top: 0,
    left: 0,
    height: 0,
    width: 0
  };
  var docElem = doc && doc.documentElement;
  if (!docElem || !contains(docElem, node)) return box;
  if (node.getBoundingClientRect !== void 0) box = node.getBoundingClientRect();
  box = {
    top: box.top + scrollTop_default(docElem) - (docElem.clientTop || 0),
    left: box.left + scrollLeft_default(docElem) - (docElem.clientLeft || 0),
    width: box.width,
    height: box.height
  };
  return box;
}
var init_offset = __esm({
  "node_modules/dom-helpers/esm/offset.js"() {
    init_contains();
    init_ownerDocument();
    init_scrollLeft();
    init_scrollTop();
  }
});

// node_modules/dom-helpers/esm/height.js
function height(node, client) {
  var win = isWindow(node);
  return win ? win.innerHeight : client ? node.clientHeight : offset(node).height;
}
var init_height = __esm({
  "node_modules/dom-helpers/esm/height.js"() {
    init_isWindow();
    init_offset();
  }
});

// node_modules/dom-helpers/esm/offsetParent.js
function offsetParent(node) {
  var doc = ownerDocument(node);
  var parent = node && node.offsetParent;
  while (isHTMLElement(parent) && parent.nodeName !== "HTML" && css_default(parent, "position") === "static") {
    parent = parent.offsetParent;
  }
  return parent || doc.documentElement;
}
var isHTMLElement;
var init_offsetParent = __esm({
  "node_modules/dom-helpers/esm/offsetParent.js"() {
    init_css();
    init_ownerDocument();
    isHTMLElement = function isHTMLElement2(e) {
      return !!e && "offsetParent" in e;
    };
  }
});

// node_modules/dom-helpers/esm/position.js
function position(node, offsetParent2) {
  var parentOffset = {
    top: 0,
    left: 0
  };
  var offset2;
  if (css_default(node, "position") === "fixed") {
    offset2 = node.getBoundingClientRect();
  } else {
    var parent = offsetParent2 || offsetParent(node);
    offset2 = offset(node);
    if (nodeName(parent) !== "html") parentOffset = offset(parent);
    var borderTop = String(css_default(parent, "borderTopWidth") || 0);
    parentOffset.top += parseInt(borderTop, 10) - scrollTop_default(parent) || 0;
    var borderLeft = String(css_default(parent, "borderLeftWidth") || 0);
    parentOffset.left += parseInt(borderLeft, 10) - scrollLeft_default(parent) || 0;
  }
  var marginTop = String(css_default(node, "marginTop") || 0);
  var marginLeft = String(css_default(node, "marginLeft") || 0);
  return _extends({}, offset2, {
    top: offset2.top - parentOffset.top - (parseInt(marginTop, 10) || 0),
    left: offset2.left - parentOffset.left - (parseInt(marginLeft, 10) || 0)
  });
}
var nodeName;
var init_position = __esm({
  "node_modules/dom-helpers/esm/position.js"() {
    init_extends();
    init_css();
    init_offset();
    init_offsetParent();
    init_scrollLeft();
    init_scrollTop();
    nodeName = function nodeName2(node) {
      return node.nodeName && node.nodeName.toLowerCase();
    };
  }
});

// node_modules/dom-helpers/esm/width.js
function getWidth(node, client) {
  var win = isWindow(node);
  return win ? win.innerWidth : client ? node.clientWidth : offset(node).width;
}
var init_width = __esm({
  "node_modules/dom-helpers/esm/width.js"() {
    init_isWindow();
    init_offset();
  }
});

export {
  clsx_m_default,
  clsx_m_exports,
  init_clsx_m,
  cancel,
  request,
  init_animationFrame,
  matches,
  init_matches,
  closest,
  closest_exports,
  init_closest,
  isDocument,
  init_isDocument,
  isWindow,
  init_isWindow,
  scrollLeft_default,
  init_scrollLeft,
  scrollTop_default,
  init_scrollTop,
  offset,
  init_offset,
  height,
  init_height,
  offsetParent,
  init_offsetParent,
  position,
  init_position,
  getWidth,
  init_width
};
//# sourceMappingURL=chunk-GVODG3E2.js.map
