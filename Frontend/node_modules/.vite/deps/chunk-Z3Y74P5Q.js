import {
  __esm,
  __export
} from "./chunk-LK32TJAX.js";

// node_modules/dom-helpers/esm/canUseDOM.js
var canUseDOM_default;
var init_canUseDOM = __esm({
  "node_modules/dom-helpers/esm/canUseDOM.js"() {
    canUseDOM_default = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  }
});

// node_modules/dom-helpers/esm/addEventListener.js
function addEventListener(node, eventName, handler, options) {
  if (options && typeof options !== "boolean" && !onceSupported) {
    var once = options.once, capture = options.capture;
    var wrappedHandler = handler;
    if (!onceSupported && once) {
      wrappedHandler = handler.__once || function onceHandler(event) {
        this.removeEventListener(eventName, onceHandler, capture);
        handler.call(this, event);
      };
      handler.__once = wrappedHandler;
    }
    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);
  }
  node.addEventListener(eventName, handler, options);
}
var optionsSupported, onceSupported, options, addEventListener_default;
var init_addEventListener = __esm({
  "node_modules/dom-helpers/esm/addEventListener.js"() {
    init_canUseDOM();
    optionsSupported = false;
    onceSupported = false;
    try {
      options = {
        get passive() {
          return optionsSupported = true;
        },
        get once() {
          return onceSupported = optionsSupported = true;
        }
      };
      if (canUseDOM_default) {
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, true);
      }
    } catch (e) {
    }
    addEventListener_default = addEventListener;
  }
});

// node_modules/dom-helpers/esm/removeEventListener.js
function removeEventListener(node, eventName, handler, options) {
  var capture = options && typeof options !== "boolean" ? options.capture : options;
  node.removeEventListener(eventName, handler, capture);
  if (handler.__once) {
    node.removeEventListener(eventName, handler.__once, capture);
  }
}
var removeEventListener_default;
var init_removeEventListener = __esm({
  "node_modules/dom-helpers/esm/removeEventListener.js"() {
    removeEventListener_default = removeEventListener;
  }
});

// node_modules/dom-helpers/esm/listen.js
var listen_exports = {};
__export(listen_exports, {
  default: () => listen_default
});
function listen(node, eventName, handler, options) {
  addEventListener_default(node, eventName, handler, options);
  return function() {
    removeEventListener_default(node, eventName, handler, options);
  };
}
var listen_default;
var init_listen = __esm({
  "node_modules/dom-helpers/esm/listen.js"() {
    init_addEventListener();
    init_removeEventListener();
    listen_default = listen;
  }
});

// node_modules/dom-helpers/esm/contains.js
var contains_exports = {};
__export(contains_exports, {
  default: () => contains
});
function contains(context, node) {
  if (context.contains) return context.contains(node);
  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);
}
var init_contains = __esm({
  "node_modules/dom-helpers/esm/contains.js"() {
  }
});

// node_modules/dom-helpers/esm/querySelectorAll.js
function qsa(element, selector) {
  return toArray(element.querySelectorAll(selector));
}
var toArray;
var init_querySelectorAll = __esm({
  "node_modules/dom-helpers/esm/querySelectorAll.js"() {
    toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
  }
});

// node_modules/dom-helpers/esm/scrollbarSize.js
function scrollbarSize(recalc) {
  if (!size && size !== 0 || recalc) {
    if (canUseDOM_default) {
      var scrollDiv = document.createElement("div");
      scrollDiv.style.position = "absolute";
      scrollDiv.style.top = "-9999px";
      scrollDiv.style.width = "50px";
      scrollDiv.style.height = "50px";
      scrollDiv.style.overflow = "scroll";
      document.body.appendChild(scrollDiv);
      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
  }
  return size;
}
var size;
var init_scrollbarSize = __esm({
  "node_modules/dom-helpers/esm/scrollbarSize.js"() {
    init_canUseDOM();
  }
});

// node_modules/dom-helpers/esm/ownerDocument.js
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}
var init_ownerDocument = __esm({
  "node_modules/dom-helpers/esm/ownerDocument.js"() {
  }
});

// node_modules/dom-helpers/esm/ownerWindow.js
function ownerWindow(node) {
  var doc = ownerDocument(node);
  return doc && doc.defaultView || window;
}
var init_ownerWindow = __esm({
  "node_modules/dom-helpers/esm/ownerWindow.js"() {
    init_ownerDocument();
  }
});

// node_modules/dom-helpers/esm/getComputedStyle.js
function getComputedStyle(node, psuedoElement) {
  return ownerWindow(node).getComputedStyle(node, psuedoElement);
}
var init_getComputedStyle = __esm({
  "node_modules/dom-helpers/esm/getComputedStyle.js"() {
    init_ownerWindow();
  }
});

// node_modules/dom-helpers/esm/hyphenate.js
function hyphenate(string) {
  return string.replace(rUpper, "-$1").toLowerCase();
}
var rUpper;
var init_hyphenate = __esm({
  "node_modules/dom-helpers/esm/hyphenate.js"() {
    rUpper = /([A-Z])/g;
  }
});

// node_modules/dom-helpers/esm/hyphenateStyle.js
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, "-ms-");
}
var msPattern;
var init_hyphenateStyle = __esm({
  "node_modules/dom-helpers/esm/hyphenateStyle.js"() {
    init_hyphenate();
    msPattern = /^ms-/;
  }
});

// node_modules/dom-helpers/esm/isTransform.js
function isTransform(value) {
  return !!(value && supportedTransforms.test(value));
}
var supportedTransforms;
var init_isTransform = __esm({
  "node_modules/dom-helpers/esm/isTransform.js"() {
    supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
  }
});

// node_modules/dom-helpers/esm/css.js
function style(node, property) {
  var css = "";
  var transforms = "";
  if (typeof property === "string") {
    return node.style.getPropertyValue(hyphenateStyleName(property)) || getComputedStyle(node).getPropertyValue(hyphenateStyleName(property));
  }
  Object.keys(property).forEach(function(key) {
    var value = property[key];
    if (!value && value !== 0) {
      node.style.removeProperty(hyphenateStyleName(key));
    } else if (isTransform(key)) {
      transforms += key + "(" + value + ") ";
    } else {
      css += hyphenateStyleName(key) + ": " + value + ";";
    }
  });
  if (transforms) {
    css += "transform: " + transforms + ";";
  }
  node.style.cssText += ";" + css;
}
var css_default;
var init_css = __esm({
  "node_modules/dom-helpers/esm/css.js"() {
    init_getComputedStyle();
    init_hyphenateStyle();
    init_isTransform();
    css_default = style;
  }
});

// node_modules/dom-helpers/esm/activeElement.js
function activeElement(doc) {
  if (doc === void 0) {
    doc = ownerDocument();
  }
  try {
    var active = doc.activeElement;
    if (!active || !active.nodeName) return null;
    return active;
  } catch (e) {
    return doc.body;
  }
}
var init_activeElement = __esm({
  "node_modules/dom-helpers/esm/activeElement.js"() {
    init_ownerDocument();
  }
});

export {
  ownerDocument,
  init_ownerDocument,
  activeElement,
  init_activeElement,
  canUseDOM_default,
  init_canUseDOM,
  addEventListener_default,
  init_addEventListener,
  ownerWindow,
  init_ownerWindow,
  getComputedStyle,
  init_getComputedStyle,
  hyphenate,
  init_hyphenate,
  isTransform,
  init_isTransform,
  css_default,
  init_css,
  removeEventListener_default,
  init_removeEventListener,
  listen_default,
  listen_exports,
  init_listen,
  contains,
  contains_exports,
  init_contains,
  qsa,
  init_querySelectorAll,
  scrollbarSize,
  init_scrollbarSize
};
//# sourceMappingURL=chunk-Z3Y74P5Q.js.map
